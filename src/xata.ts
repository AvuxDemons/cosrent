// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "user",
    columns: [
      { name: "email", type: "string", unique: true },
      { name: "full_name", type: "string", unique: true },
      { name: "province", type: "string" },
      { name: "regency", type: "string" },
      { name: "district", type: "string" },
      { name: "postcode", type: "string" },
      { name: "address1", type: "string" },
      { name: "address2", type: "string" },
      { name: "phone", type: "string", unique: true },
      { name: "username", type: "string", unique: true },
      { name: "sosmed", type: "json", notNull: true, defaultValue: "[]" },
      { name: "emergencyphone", type: "string", unique: true },
      { name: "identitycard", type: "file" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type DatabaseSchema = {
  user: UserRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://CosRent-mlh76b.ap-southeast-2.xata.sh/db/COSRENT",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
